{"version":3,"sources":["app/home/github.service.spec.ts"],"names":[],"mappings":"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","file":"app/home/github.service.spec.js","sourcesContent":["import {\n    inject,\n    beforeEachProviders\n} from '@angular/core/testing';\nimport {provide} from '@angular/core';\nimport {BaseRequestOptions, Http, Response, ResponseOptions} from '@angular/http';\nimport {MockBackend} from '@angular/http/testing';\nimport { HTTP_PROVIDERS } from '@angular/http';\nimport { MOCK_REPOS } from './mock-repos';\nimport { GithubSearchService } from './github.service';\n\ndescribe('MockBackend: GithubSearchService', () => {\n    let mockbackend, service;\n\n    beforeEachProviders(() => [\n        GithubSearchService,\n        HTTP_PROVIDERS,\n        MockBackend,\n        BaseRequestOptions,\n        provide(Http, {\n        useFactory: (backend, options) => new Http(backend, options), \n        deps: [MockBackend, BaseRequestOptions]})\n    ]);\n\n    beforeEach(inject([MockBackend, GithubSearchService], (_mockbackend, _service) => {\n        mockbackend = _mockbackend;\n        service = _service;\n    }));\n    \n    it('should return mocked response', done => {\n        let response = MOCK_REPOS;\n        mockbackend.connections.subscribe(connection => {\n            connection.mockRespond(\n                new Response(new ResponseOptions({body: response }))\n            );\n        });\n        service.getReposByUsername().subscribe(repos => {\n            repos.forEach(repo => {\n                expect(repo.name).toBeDefined();\n                expect(repo.description).toBeDefined();\n                expect(repo.html_url).toBeDefined();\n                expect(repo.stargazers_count).toBeDefined();\n                expect(repo.owner).toBeDefined();\n                expect(repo.owner.avatar_url).toBeDefined();    \n            });\n\n            expect(repos.length).toBe(2);\n            done();\n        });\n    });\n\n    it('it should return mocked error', done => {\n        let response = {code: 404, message: 'Not Found'};\n        mockbackend.connections.subscribe(connection => {\n            connection.mockRespond(\n                new Response(new ResponseOptions({body: response }))\n            );\n        });\n        service.getReposByUsername().subscribe(error => {\n            expect(error.code).toBe(404);\n            expect(error.message).toEqual(\"Not Found\");\n            done();\n        });\n    });\n\n    it('should form url based on language and page number', () => {\n        let language = \"js\";\n        let pageNumber = 1;\n        let repoUrl =  service.formRepoUrl(language, pageNumber);\n        expect(repoUrl).toEqual(\"https://api.github.com/search/repositories?q=+language:js&page=1\");\n    });\n\n    it('should return an error', () => {\n        let error = {\n            \"message\": \"Not Found\",\n            \"documentation_url\": \"https://developer.github.com/v3\" \n        };\n        let result = service.handleError(error);\n        expect(result.error).toEqual(\"Not Found\");\n    });\n});\n\n"],"sourceRoot":"/source/"}